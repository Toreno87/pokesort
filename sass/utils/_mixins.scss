@mixin font-stack($alias, $name) {
	@font-face {
		font-family: $alias;
		src: url("./" + $name + ".eot");
		src: url("./" + $name + ".eot?#iefix") format("embedded-opentype"), url("./" + $name + ".woff2") format("woff2"), url("./" + $name + ".woff") format("woff"), url("./" + $name + ".ttf") format("truetype");
		font-weight: normal;
		font-style: normal;
	}
}

@mixin font($fw: 400, $ff: $base_h1_font_stack) {
	font-weight: $fw;
	@if($ff  != 0) {
		font-family: $ff;
	}
}

@function parseInt($n) {
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
  $px : ();
  $rem: ();

  @each $value in $values {

    @if $value == 0 or $value == auto {
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == "px" {
        $px : append($px,  $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == "rem" {
        $px : append($px,  ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}

@mixin frem($value) {
	@include rem(font-size, $value);
}


@mixin re($width, $direction: max) {
	@if ($direction != max) {
		$direction: min;
	}
	@media screen and (#{$direction}#{-width}: $width * 1px) {
		@content
	}
}

@mixin size($w_size: 0, $h_size: 0) {
	
	max-width: $w_size * 1px;
	width: 100%;
	
	@if $h_size != 0 {
		
		min-height: $h_size * 1px;
		
	} @else {
		
		min-height: $h_size;
	}
	
	height: auto;
	margin: 0 auto;
}

@mixin bg($img, $type:png, $size: 0, $repeat:no-repeat, $top:center, $left:center) {
	background: url(#{$img}.#{$type}) #{$repeat} #{$top} #{$left};
	@if($size != 0) {
		@include background-size($size);
	}
}

@mixin clear ($after: true) {
	$prefix: after;
	
	@if $after != true {
		$prefix: before ;
	}
	
	&:#{$prefix} {
		content: "";
		display: table;
		clear: both;
	}
}

@mixin placeholder ($color: transparent) {
	@if color != transparent {
		::-webkit-input-placeholder {color: $color}
		::-moz-placeholder          {color: $color}
		:-moz-placeholder           {color: $color}
		:-ms-input-placeholder      {color: $color}
	} @else {
		:focus::-webkit-input-placeholder {color:$color}
		:focus::-moz-placeholder          {color:$color}
		:focus:-moz-placeholder           {color:$color}
		:focus:-ms-input-placeholder      {color:$color}
	}
}

@mixin list-image($length , $img, $type:png, $repeat:no-repeat, $top:center, $left:center, $elem:1) {
	
	@for $i from $elem through $length {
		background: url(#{$img}#{$i}.#{$type}) #{$repeat} #{$top} #{$left};
	}
}

@mixin font-smoothing($value: antialiased) {
	@if $value == antialiased {
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	}
	@else {
		-webkit-font-smoothing: subpixel-antialiased;
		-moz-osx-font-smoothing: auto;
	}
}

@mixin text-overflow() {
	overflow: hidden;
	-ms-text-overflow: ellipsis;
	text-overflow: ellipsis;
	white-space: nowrap;
}

@mixin coverdiv {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}

@mixin vcenter {
	position: absolute;
	top: 50%;
	left: 50%;
	@include translate(-50%, -50%);
}

@mixin justifly {
	text-align: justify;
	line-height: 0;
	font-size: 0;
	zoom: 1;
	text-align-last: justify;
	&:after {
		content: '';
		display: inline-block;
		width: 100%;
		height: 0px;
		visibility: hidden;
		overflow: hidden;
	}
}

@mixin vertical {
	text-align: center;
	font-size: 0;
	&:before {
		content: '';
		display: inline-block;
		vertical-align: middle;
		width: 0;
		height: 100%;
	}
}

@mixin unselect {
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}

@mixin prevent-text {
	-ms-worldbreak: break-all;
	word-break: break-all;
	word-break: break-world;
	-webkit-hyphens: auto;
	-moz-hyphens: auto;
	hyphens: auto;
}